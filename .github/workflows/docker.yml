name: Docker Build and Test

on:
  workflow_dispatch:
    inputs:
      version:
        description: '镜像版本号（例如：v1.0.0）'
        required: true
        default: 'latest'

env:
  IMAGE_NAME: dstatus

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      # 步骤 1: 清理缓存
      - name: Clean up action cache
        run: |
          sudo rm -rf ~/work/_actions/cache/*

      # 步骤 2: 检出代码
      - name: Checkout repository
        uses: actions/checkout@v3

      # 步骤 3: 初始化 Docker 环境
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 步骤 4: 构建镜像
      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          load: true
          tags: ${{ env.IMAGE_NAME }}:${{ github.event.inputs.version || 'latest' }}

      # 步骤 5: 试运行容器
      - name: Test Container
        run: |
          set -e
          # 定义镜像标签
          IMAGE_TAG=${{ github.event.inputs.version || 'latest' }}
          IMAGE_NAME=${{ env.IMAGE_NAME }}
          
          # 启动容器
          echo "启动容器..."
          docker run -d \
            --name dstatus \
            -p 5555:5555 \
            -e NODE_ENV=production \
            -e TZ=Asia/Shanghai \
            -e BOT_ENABLED=false \
            ${IMAGE_NAME}:${IMAGE_TAG}
          
          # 等待容器启动（最长 60 秒）
          echo "等待容器启动..."
          timeout 60s bash -c 'until curl --output /dev/null --silent --head --fail http://localhost:5555; do sleep 5; done' || {
            echo "::error::容器启动超时"
            docker logs dstatus
            docker rm -f dstatus
            exit 1
          }

          # 健康检查
          echo "执行健康检查..."
          for i in {1..3}; do
            if curl --output /dev/null --silent --head --fail http://localhost:5555; then
              echo "健康检查通过"
              break
            else
              echo "健康检查第 $i 次失败，等待 10 秒重试..."
              sleep 10
            fi
          done
          if [ $i -eq 3 ]; then
            echo "::error::健康检查失败"
            docker logs dstatus
            docker rm -f dstatus
            exit 1
          fi

          # 输出容器日志
          echo "容器日志:"
          docker logs dstatus

      # 步骤 6: 保存镜像为 .tar 文件
      - name: Save Docker image as .tar
        run: |
          docker save -o ${{ env.IMAGE_NAME }}.tar ${{ env.IMAGE_NAME }}:${{ github.event.inputs.version || 'latest' }}

      # 步骤 7: 强制检查关键文件
      - name: Check /app/nekonekostatus.js
        run: |
          docker run --rm ${{ env.IMAGE_NAME }}:${{ github.event.inputs.version || 'latest' }} ls -la /app/nekonekostatus.js
          echo "✅ 校验通过：/app/nekonekostatus.js 存在"

      # 步骤 8: 清理容器
      - name: Clean up container
        run: |
          docker rm -f dstatus || true

      # 步骤 9: 上传构建产物
      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: ${{ env.IMAGE_NAME }}.tar
